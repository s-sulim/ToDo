@model ToDo.Models.Task

@{
    var isAdmin = User.IsInRole("Admin");
}

<form asp-controller="Task" asp-action="CreateEditTask" class="form-centered" enctype="multipart/form-data">
    <div class="card" style="width: 650px;" align="center">
        <div class="card-header">
            @{
                string header = "";
                if (Model.Id != 0)
                    header = "Edit Task";
                else
                    header = "New Task";
                                <h5>@header</h5>
            }
        </div>
        <div class="card-body">
            <input hidden asp-for="Id" /> @*Needed to ensure the Id will be given to the action of the controller so that code will be executed correctly*@
            <input hidden asp-for="CreatedUserName" />
            <input hidden asp-for="FinishedUserName" /> 
            <input hidden asp-for="CreatedDate" /> 
            <div class="row mb-3">
                <div class="col">
                    <input asp-for="Title" type="text" class="form-control" placeholder="Title"></input>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-5">
                    <div class="input-group mb-3">
                        <label class="input-group-text" for="selectPriority">Priority</label>
                        <select class="form-select" id="selectPriority" asp-for="Priority" onclick="onSelectPriority(this)">
                            <option value="0" style="color:#dc3545;">High</option>
                            <option value="1" style="color:#fd7e14;">Medium</option>
                            <option value="2" style="color:#20c997;" icon="1">Low</option>
                        </select>
                    </div>
                </div>
                <div class="col-7">
                    <div class="input-group mb-3">
                        <span class="input-group-text">Due date</span>
                        <input asp-for="DueDate" type="date" class="form-control" style="width: 110px;"></input>
                    </div>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-5">
                    <div class="input-group mb-3">
                        <label class="input-group-text" for="selectType">Type</label>
                        <select class="form-select" id="selectType" asp-for="Type">
                            <option value="0">Housework</option>
                            <option value="1">Business</option>
                            <option value="2">Self-Improvement</option>
                            <option value="3">Health</option>
                        </select>
                    </div>
                </div>
                <div class="col-5">
                    <div class="input-group mb-3" style="width: 350px;">
                        <label class="input-group-text" for="selectState">State</label>
                        <select class="form-select" id="selectState" asp-for="State">
                            <option value="0">ToDo</option>
                            <option value="1">Doing</option>
                            <option value="2">Done</option>
                            <option value="3">Backlog</option>
                        </select>
                    </div>
                </div>
                @if (isAdmin)
                {
                   
                    <div class="input-group mb-3">
                        <label class="input-group-text" for="selectState">Assigned user</label>
                        <select class="form-select" id="user-select" asp-for="AssignedUserName">
                        </select>
                    </div>
                } else{
                <input hidden asp-for="AssignedUserName" />
                }
            </div>
            <div class="row mb-3">
                <div class="col">
                    <textarea asp-for="Text" type="text" class="form-control" rows="6" placeholder="Text"></textarea>
                </div>
            </div>
            <hr />
            <div class="row mb-3">
                <div class="col-2">
                    <div class="col-form-label" style="text-align: left;">Substeps</div>
                </div>
                <div class="col-2">
                    <button type="button" class="btn btn-info" onclick="addSubstep()">Add</button>
                </div>
            </div>
            <hr />
            <div class="row mb-3">
                <div id="substep-container">

                    @if (Model.Substeps != null)
                    {
                        for (int i = 0; i < Model.Substeps.Count; i++)
                        {
                            <div class="row mb-2 align-items-center">
                                <div class="col-sm-1">
                                    <input class="form-check-input" asp-for="@Model.Substeps[i].IsDone" type="checkbox" />
                                </div>
                                <div class="col-sm-9">
                                    <input class="form-control" asp-for="@Model.Substeps[i].Text" placeholder="Type here..."/>
                                </div>
                             
                                <div class="col-sm-2">
                                    <button type="button" class="btn btn-danger" onclick="removeSubstep(this)">Remove</button>
                                </div>
                                <input hidden asp-for="@Model.Substeps[i].TaskId" />
                                <input hidden asp-for="@Model.Substeps[i].Id" />
                                <input hidden name="Substeps[@i].MarkedForDeletion" class="substep-delete" value="false" />
                            </div>
                        }
                    }
                    
                  
                </div>
            </div>
            <div class="card-footer mt-6" style="height:50px;">
                <div class="row">
                    <div class="col-8" style="text-align: left;" >
                        <button class="btn btn-danger" type="button" onClick="showConfirmationDialog(@Model.Id)">Delete this task</button>
                    </div>
                    <div class="col-2" style="text-align: right;">
                        <button class="btn btn-warning" type="button" onClick="cancel()" style="width:100px;">Cancel</button>
                    </div>
                    <div class="col-2" style="text-align: right;">
                        <button class="btn btn-primary" type="submit" style="width:100px;">OK</button>
                    </div>
                </div>
            </div>
        </div>
</form> 

@section Scripts {
    <script>

        function addSubstep() {
            var container = document.getElementById("substep-container");
            var index = container.querySelectorAll('.row').length;

            var row = document.createElement("div");
            row.className = "row mb-2 align-items-center";

            var colCheckbox = document.createElement("div");
            colCheckbox.className = "col-sm-1";
            var checkBox = document.createElement("input");
            checkBox.type = "checkbox";
            checkBox.className = "form-check-input";
            checkBox.name = `Substeps[${index}].IsDone`;
            checkBox.onchange = function () { toggleStrikethrough(this, index); };
            colCheckbox.appendChild(checkBox);

            var colInput = document.createElement("div");
            colInput.className = "col-sm-9";
            var textInput = document.createElement("input");
            textInput.type = "text";
            textInput.className = "form-control";
            textInput.name = `Substeps[${index}].Text`;
            textInput.placeholder = "Type here...";
            colInput.appendChild(textInput);

            var colButton = document.createElement("div");
            colButton.className = "col-sm-2";
            var removeButton = document.createElement("button");
            removeButton.type = "button";
            removeButton.className = "btn btn-danger";
            removeButton.innerText = "Remove";
            removeButton.onclick = function () { removeSubstep(this); };
            colButton.appendChild(removeButton);

            row.appendChild(colCheckbox);
            row.appendChild(colInput);
            row.appendChild(colButton);

            container.appendChild(row);
        }

        function onSelectPriority(select){

            if (select.value == 0) {
                select.style = "color:#dc3545;";
            }
            else if (select.value == 1) {
                select.style = "color:#fd7e14;";
            }
            else if (select.value == 2) {
                select.style = "color:#20c997;";
            }
        }

        function removeSubstep(element) {
            var row = element.closest('.row');
            row.style.display = 'none'; // Hide the row instead of removing it
           
            // Find and set the hidden input for deletion
            var deleteInput = row.querySelector(".substep-delete");
            if (deleteInput) {
                deleteInput.value = "true";
            }
        }

        function showConfirmationDialog(id) {
            Swal.fire({
                title: "Are you sure you want to delete this task?",
                text: "This can't be undone!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                cancelButtonText: "Cancel",
                confirmButtonText: "Delete"
            }).then((result) => {
                debugger;
                if (result.isConfirmed) {
                   
                    //Backend call to delete job by id
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("DeleteTask")",
                        data: { id: id },
                        success: function (msg) {

                            Swal.fire({
                                title: "Deleted",
                                text: "Task deleted successfully.",
                                icon: "success"
                            }).then((result) => {
                                window.location.href = '/'; //Reload page
                            });
                        },
                        error: function (msg) {
                            Swal.fire({
                                title: "Error",
                                text: "Couldn't delete task!",
                                icon: "error"
                            });
                        }
                    });
                }
            });
        }
        
        function cancel() {
            window.location.href = '/';
        }
        
          
    </script>
    @if (isAdmin)
    {
        <script>
            $(document).ready(function () {
                $.ajax({
                    url: '@Url.Action("GetAllUsers", "User")',
                    type: 'GET',
                    dataType: 'json',
                    success: function (users) {
                        var select = $('#user-select');
                        $.each(users, function (i, user) {
                            debugger;
                            var assignedUserName = @Html.Raw(Json.Serialize(Model.AssignedUserName));
                            var option = $('<option>', {
                                text: user.userName,
                                value: user.userName,
                                selected: user.userName === assignedUserName
                            });
                            select.append(option);
                        });
                    },
                    error: function () {
                        alert('Error loading users.');
                    }
                });
            });
        </script>
    }
}